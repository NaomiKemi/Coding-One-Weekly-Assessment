<html>

<head>
</head>

<style>

/*  
    This is to make sure
    the canvas is in the right position
    on all browsers    
*/

canvas {
position: absolute;
top:0;
left:0;
}

</style>

<body>
    <canvas></canvas>
    <script>

var fov = 500;

var canvas = document.querySelector("canvas");
var width = window.innerWidth;
var height = window.innerHeight;
var context = canvas.getContext("2d");
canvas.setAttribute("width", width);
canvas.setAttribute("height", height);
canvas.addEventListener('mousemove',getMouse,false);
var mouseX=0;
var mouseY=0;

var point = [];
var points = [];
var point3d = [];
var angleX = 0;
var angleY = 0;
var HALF_WIDTH = width / 2;
var HALF_HEIGHT = height / 2;

var x3d = 0;
var y3d = 0;
var z3d = 0;

var lastScale = 0;
var lastx2d = 0;
var lasty2d = 0;


function createSquare(size, pointsPerSide,showDiagonals){
    

    var c = "RGB(255,0,0)"
    let stepSize = (size * 2) / pointsPerSide

    for (let i = -size; i <= size; i += stepSize){

        points.push([i,-size,-size,c])
        points.push([i,size,-size,c])
        points.push([size,i,-size, c])
        points.push([-size,i,-size, c])

       if (showDiagonals) {
        points.push([i,i,-size, c])
        points.push([i,i *-1,-size, c])
        points.push([i,i,size, c])
        points.push([i,i *-1,size,c])
       }

        points.push([i,-size,size,c])
        points.push([i,size,size,c])
        points.push([size,i,size,c])
        points.push([-size,i,size,c])
        


        if (i != -size && i != size){ // don't draw duplicates
            points.push([size,size,i,c])
            points.push([-size,size,i,c])
            points.push([size,-size,i,c])
            points.push([-size,-size,i,c])
        }

    }
}



function createRectangle(){
    points.push([10,10,10])
    points.push([-10,10,10])
    points.push([10,-10,10])
    points.push([-10,-10,10])
    points.push([10,10,-10])
    points.push([-10,10,-10])
    points.push([10,-10,-10])
    points.push([-10,-10,-10])     
}

function createSphere(c,size,offsetX){
// The below code creates a sphere of points
var dim = 90; // This is the number of rings
// Each ring has as many points as there are rings
// This is the spacing for each ring
var spacing = ((Math.PI * 2) / dim);

// This is the total number of points
var numPoints = dim * dim;

// This is how big the sphere is.
//var size = 100;



// Now we build the sphere
for (var i = 0; i < dim ; i++) {

// Calculate the depth spacing

    // To calculate the depth spacing, we divide our spacing in half
    // This is because otherwise, the cosine / sine waves will
    // oscillate positively and negatively
    // We only need the positive bit
    
    var z = size * Math.cos(spacing / 2* i);

// Calculate the size of the current ring    
    var s = size * Math.sin(spacing  /2 * i);

// For each ring..    
    
    for (var j = 0; j <dim; j++ ) {
        
// ...create the next point in the circle at the current size s, at the current depth z
//var c = "RGB(0,255,255)"
var x = Math.cos(spacing * j) * s;
var y = Math.sin(spacing * j) * s;
x += offsetX;
var point = [x, y, z,c];

// Add the point to the geometry.

        points.push(point);
    
    }
}

}
createSquare(150, 50, true)
createSphere("RGB(0,255,255)",50,0)
createSphere("RGB(255,255,0)",150,0)
createSphere("RGB(0,255,0)",100,0)
//createSphere(-100)
//createRectangle()

//
console.log(points.length);

function draw() {

    context.fillStyle = "rgb(0,0,0)";
    context.fillRect(0, 0, width, height);
    
    angleX=((mouseX/width)-0.05)/16;
    angleY=((mouseY/height)-0.05)/16;
     //console.log(angleY)
// Here we run through each point and work out where it should be drawn

    for (var i = 0; i < points.length; i++) {
        point3d = points[i];
        z3d = point3d[2];
        let c = point3d[3];
// This is the speed of the z
// It moves the points forwards in space
// We don't need it for the pure rotate
        // z3d -= 1.0;

// Check that the points aren't disappearing into space and if so push them back
// This also stops them stretching
// When they get too close
        if (z3d < -fov) z3d += 0;
        
        point3d[2] = z3d;
 
 // Calculate the rotation
    
 //console.log(`${angleX} ${angleY}`)
    rotateX(point3d,angleX);
    rotateY(point3d,angleY);
   // console.log (rotateX)
 // Get the point in position 
 
        x3d = point3d[0];
        y3d = point3d[1];
        z3d = point3d[2];
// Convert the Z value to a scale factor
// This will give the appearance of depth
        var scale = (fov / (fov + z3d));

// Store the X value with the scaling
// FOV is taken into account
// (just pushing it over to the left a bit too)
        var x2d = (x3d * scale) + HALF_WIDTH / 2;

// Store the Y value with the scaling
// FOV is taken into account

        var y2d = (y3d * scale) + HALF_HEIGHT;

// Draw the point

// Set the size based on scaling
        context.lineWidth = scale;

        context.strokeStyle = c;
        context.beginPath();
        context.moveTo(x2d, y2d);
        context.lineTo(x2d + scale, y2d);
        context.stroke();
    }
	requestAnimationFrame(draw);
}

	requestAnimationFrame(draw);

function rotateX(point3d,angleX) {
        var	x = point3d[0]; 
        var	z = point3d[2]; 
	
        var	cosRY = Math.cos(angleX);
        var	sinRY = Math.sin(angleX);
        
        var	tempz = z; 
        var	tempx = x;

        x= (tempx*cosRY)+(tempz*sinRY);
        z= (tempx*-sinRY)+(tempz*cosRY);

        point3d[0] = x;
        point3d[2] = z;
          
}

function rotateY(point3d,angleY) {
        var y = point3d[1];
        var	z = point3d[2]; 
	
        var cosRX = Math.cos(angleY);
        var sinRX = Math.sin(angleY);
        
        var	tempz = z; 
        var	tempy = y;

        y= (tempy*cosRX)+(tempz*sinRX);
        z= (tempy*-sinRX)+(tempz*cosRX);

        point3d[1] = y;
        point3d[2] = z;
          
} 

    //here's our function 'getMouse'.
function getMouse (mousePosition) {
//for other browsers..
  if (mousePosition.layerX || mousePosition.layerX === 0) { // Firefox?
    mouseX = mousePosition.layerX;
    mouseY = mousePosition.layerY;
  } else if (mousePosition.offsetX || mousePosition.offsetX === 0) { // Opera?
    mouseX = mousePosition.offsetX;
    mouseY = mousePosition.offsetY;
  }
}

</script>

</body>

</html><html>

<head>
</head>

<style>

/*  
    This is to make sure
    the canvas is in the right position
    on all browsers    
*/

canvas {
position: absolute;
top:0;
left:0;
}

</style>

<body>
    <canvas></canvas>
    <script>

var fov = 500;

var canvas = document.querySelector("canvas");
var width = window.innerWidth;
var height = window.innerHeight;
var context = canvas.getContext("2d");
canvas.setAttribute("width", width);
canvas.setAttribute("height", height);
canvas.addEventListener('mousemove',getMouse,false);
var mouseX=0;
var mouseY=0;

var point = [];
var points = [];
var point3d = [];
var angleX = 0;
var angleY = 0;
var HALF_WIDTH = width / 2;
var HALF_HEIGHT = height / 2;

var x3d = 0;
var y3d = 0;
var z3d = 0;

var lastScale = 0;
var lastx2d = 0;
var lasty2d = 0;


function createSquare(size, pointsPerSide,showDiagonals){
    

    var c = "RGB(255,0,0)"
    let stepSize = (size * 2) / pointsPerSide

    for (let i = -size; i <= size; i += stepSize){

        points.push([i,-size,-size,c])
        points.push([i,size,-size,c])
        points.push([size,i,-size, c])
        points.push([-size,i,-size, c])

       if (showDiagonals) {
        points.push([i,i,-size, c])
        points.push([i,i *-1,-size, c])
        points.push([i,i,size, c])
        points.push([i,i *-1,size,c])
       }

        points.push([i,-size,size,c])
        points.push([i,size,size,c])
        points.push([size,i,size,c])
        points.push([-size,i,size,c])
        


        if (i != -size && i != size){ // don't draw duplicates
            points.push([size,size,i,c])
            points.push([-size,size,i,c])
            points.push([size,-size,i,c])
            points.push([-size,-size,i,c])
        }

    }
}



function createRectangle(){
    points.push([10,10,10])
    points.push([-10,10,10])
    points.push([10,-10,10])
    points.push([-10,-10,10])
    points.push([10,10,-10])
    points.push([-10,10,-10])
    points.push([10,-10,-10])
    points.push([-10,-10,-10])     
}

function createSphere(c,size,offsetX){
// The below code creates a sphere of points
var dim = 90; // This is the number of rings
// Each ring has as many points as there are rings
// This is the spacing for each ring
var spacing = ((Math.PI * 2) / dim);

// This is the total number of points
var numPoints = dim * dim;

// This is how big the sphere is.
//var size = 100;



// Now we build the sphere
for (var i = 0; i < dim ; i++) {

// Calculate the depth spacing

    // To calculate the depth spacing, we divide our spacing in half
    // This is because otherwise, the cosine / sine waves will
    // oscillate positively and negatively
    // We only need the positive bit
    
    var z = size * Math.cos(spacing / 2* i);

// Calculate the size of the current ring    
    var s = size * Math.sin(spacing  /2 * i);

// For each ring..    
    
    for (var j = 0; j <dim; j++ ) {
        
// ...create the next point in the circle at the current size s, at the current depth z
//var c = "RGB(0,255,255)"
var x = Math.cos(spacing * j) * s;
var y = Math.sin(spacing * j) * s;
x += offsetX;
var point = [x, y, z,c];

// Add the point to the geometry.

        points.push(point);
    
    }
}

}
createSquare(150, 50, true)
createSphere("RGB(0,255,255)",50,0)
createSphere("RGB(255,255,0)",150,0)
createSphere("RGB(0,255,0)",100,0)
//createSphere(-100)
//createRectangle()

//
console.log(points.length);

function draw() {

    context.fillStyle = "rgb(0,0,0)";
    context.fillRect(0, 0, width, height);
    
    angleX=((mouseX/width)-0.05)/16;
    angleY=((mouseY/height)-0.05)/16;
     //console.log(angleY)
// Here we run through each point and work out where it should be drawn

    for (var i = 0; i < points.length; i++) {
        point3d = points[i];
        z3d = point3d[2];
        let c = point3d[3];
// This is the speed of the z
// It moves the points forwards in space
// We don't need it for the pure rotate
        // z3d -= 1.0;

// Check that the points aren't disappearing into space and if so push them back
// This also stops them stretching
// When they get too close
        if (z3d < -fov) z3d += 0;
        
        point3d[2] = z3d;
 
 // Calculate the rotation
    
 //console.log(`${angleX} ${angleY}`)
    rotateX(point3d,angleX);
    rotateY(point3d,angleY);
   // console.log (rotateX)
 // Get the point in position 
 
        x3d = point3d[0];
        y3d = point3d[1];
        z3d = point3d[2];
// Convert the Z value to a scale factor
// This will give the appearance of depth
        var scale = (fov / (fov + z3d));

// Store the X value with the scaling
// FOV is taken into account
// (just pushing it over to the left a bit too)
        var x2d = (x3d * scale) + HALF_WIDTH / 2;

// Store the Y value with the scaling
// FOV is taken into account

        var y2d = (y3d * scale) + HALF_HEIGHT;

// Draw the point

// Set the size based on scaling
        context.lineWidth = scale;

        context.strokeStyle = c;
        context.beginPath();
        context.moveTo(x2d, y2d);
        context.lineTo(x2d + scale, y2d);
        context.stroke();
    }
	requestAnimationFrame(draw);
}

	requestAnimationFrame(draw);

function rotateX(point3d,angleX) {
        var	x = point3d[0]; 
        var	z = point3d[2]; 
	
        var	cosRY = Math.cos(angleX);
        var	sinRY = Math.sin(angleX);
        
        var	tempz = z; 
        var	tempx = x;

        x= (tempx*cosRY)+(tempz*sinRY);
        z= (tempx*-sinRY)+(tempz*cosRY);

        point3d[0] = x;
        point3d[2] = z;
          
}

function rotateY(point3d,angleY) {
        var y = point3d[1];
        var	z = point3d[2]; 
	
        var cosRX = Math.cos(angleY);
        var sinRX = Math.sin(angleY);
        
        var	tempz = z; 
        var	tempy = y;

        y= (tempy*cosRX)+(tempz*sinRX);
        z= (tempy*-sinRX)+(tempz*cosRX);

        point3d[1] = y;
        point3d[2] = z;
          
} 

    //here's our function 'getMouse'.
function getMouse (mousePosition) {
//for other browsers..
  if (mousePosition.layerX || mousePosition.layerX === 0) { // Firefox?
    mouseX = mousePosition.layerX;
    mouseY = mousePosition.layerY;
  } else if (mousePosition.offsetX || mousePosition.offsetX === 0) { // Opera?
    mouseX = mousePosition.offsetX;
    mouseY = mousePosition.offsetY;
  }
}

</script>

</body>

</html>

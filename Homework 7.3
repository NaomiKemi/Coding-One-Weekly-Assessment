<!DOCTYPE html>
<head>
<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
	</style>
</head>
<body>
	<script id="vertexShader" type="x-shader/x-vertex">
		uniform highp float time;

		void main() {
	        gl_Position = vec4(position,1.0) ;                
		}
	</script>
	<script id="fragmentShader" type="x-shader/x-fragment">
		//============================================================
		//PUT YOUR GLSL CODE HERE
		//============================================================

        precision mediump float;
        
        uniform vec2 resolution;
        uniform vec2 mouse;
        uniform highp float time;
         #define M_PI 3.14159265358979323846

        float rectangle(vec2 pos, float width, float height) {
        
            vec2 normCoords = gl_FragCoord.xy/resolution;
            float aspect = resolution.x/resolution.y;
    	    if (length((normCoords.x-pos.x) * aspect)< width && length(normCoords.y-pos.y) < height) {
                return 1.0;
            } else {
                return 0.0;
            }
        }
         
    
        float square(vec2 pos, float size,float angle) {
            
             mat2 rotation = mat2(cos(angle), sin(angle),
             -sin(angle), cos(angle));
        	 vec2 normCoords = gl_FragCoord.xy/resolution;
             float aspect = resolution.x/resolution.y;
             vec2 newPos = normCoords-pos;
             newPos *= rotation;
            if (length((newPos.x) * aspect)< size && length(newPos.y) < size) { return 1.0; } else { return 0.;}
         }
    
        float line(vec2 pos, float funct) {

           return step(funct,pos.y)-step(funct,pos.y-0.01);
         }
        
        float circle(vec2 pos, float size, float blurAmount) {

            float aspect = resolution.x/resolution.y;
            vec2 normCoord = vec2(gl_FragCoord.x/(resolution.x) * aspect ,gl_FragCoord.y/resolution.y);
            float colour = distance(normCoord, vec2(pos.x * aspect, pos.y));
            size = 1.0/size;
            return smoothstep(colour * size, colour * size + blurAmount, 1.0);
         }
        
         void main(){
			float angle = M_PI * mouse.x;
			mat2 rotation = mat2(cos(angle), sin(angle),
			-sin(angle), cos(angle));

          //vec2 pos = gl_FragCoord.xy/resolution;
            
            float sq1 = square(vec2(0.2, 0.25), 0.2,angle);
            vec3 sq1Colour = vec3(1.0, 0.0, 0.0) * sq1;

            float sq2 = square(vec2(0.5, 0.7), 0.2,angle);
            vec3 sq2Colour = vec3(0.0, 1.0, 0.0) * sq2;

            float sq3 = square(vec2(0.5, 0.25), 0.2,angle);
            vec3 sq3Colour = vec3(0.0, 0.0, 1.0) * sq3;

            float c1 = circle(vec2(0.9, 0.4), 0.2, 0.2);
            vec3 c1Colour = vec3(0.0, 1.0, 1.0) * c1;

            float rt1 = rectangle(vec2(0.2, 0.6), 0.2, 0.1);
            vec3 rt1Colour = vec3(1.0, 0.0, 1.0) * rt1;
            
            
        	gl_FragColor = vec4(sq1Colour + sq2Colour + sq3Colour + c1Colour + rt1Colour, 1.0);
        }
		//============================================================
		//END OF GLSL CODE
		//============================================================
	</script>
	<script>
		//change the resolution here. 1 is highest
		var pixel_resolution = 2;
		var stats;
		var camera, scene, renderer;
		var uniforms;
		init();
		animate();
		function init() {

			camera = new THREE.Camera();
			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneBufferGeometry(2,2);
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			var mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
			document.body.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);

		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;

		}
		function animate() {
			requestAnimationFrame(animate);
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.01;
			renderer.render(scene, camera);
		}
	</script>
</body>
</html>
